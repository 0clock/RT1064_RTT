from machine import SPI,Pin
import time

cs  = Pin(("B3",  3))   #引脚定义 OLED CS引脚接B3
rst = Pin(("B12",12))   #引脚定义 OLED RES引脚接B12
dc  = Pin(("B13",13))   #引脚定义 OLED DC引脚接B13

dc.init(Pin.OUT_PP, Pin.PULL_NONE)  #引脚初始化，方向：输出 无上拉
rst.init(Pin.OUT_PP, Pin.PULL_NONE) #引脚初始化，方向：输出 无上拉
cs.init(Pin.OUT_PP, Pin.PULL_NONE)  #引脚初始化，方向：输出 无上拉

#字库6*8
asc ={
       "0":[0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E],
       "1":[0x00, 0x00, 0x42, 0x7F, 0x40, 0x00],
       "2":[0x00, 0x42, 0x61, 0x51, 0x49, 0x46],
       "3":[0x00, 0x21, 0x41, 0x45, 0x4B, 0x31],
       "4":[0x00, 0x18, 0x14, 0x12, 0x7F, 0x10],
       "5":[0x00, 0x27, 0x45, 0x45, 0x45, 0x39],
       "6":[0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30],
       "7":[0x00, 0x01, 0x71, 0x09, 0x05, 0x03],
       "8":[0x00, 0x36, 0x49, 0x49, 0x49, 0x36],
       "9":[0x00, 0x06, 0x49, 0x49, 0x29, 0x1E],
       "A":[0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C],
       "B":[0x00, 0x7F, 0x49, 0x49, 0x49, 0x36],
       "C":[0x00, 0x3E, 0x41, 0x41, 0x41, 0x22],
       "D":[0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C],
       "E":[0x00, 0x7F, 0x49, 0x49, 0x49, 0x41],
       "F":[0x00, 0x7F, 0x09, 0x09, 0x09, 0x01],
       "G":[0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A],
       "H":[0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F],
       "I":[0x00, 0x00, 0x41, 0x7F, 0x41, 0x00],
       "J":[0x00, 0x20, 0x40, 0x41, 0x3F, 0x01],
       "K":[0x00, 0x7F, 0x08, 0x14, 0x22, 0x41],
       "L":[0x00, 0x7F, 0x40, 0x40, 0x40, 0x40],
       "M":[0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F],
       "N":[0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F],
       "O":[0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E],
       "P":[0x00, 0x7F, 0x09, 0x09, 0x09, 0x06],
       "Q":[0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E],
       "R":[0x00, 0x7F, 0x09, 0x19, 0x29, 0x46],
       "S":[0x00, 0x46, 0x49, 0x49, 0x49, 0x31],
       "T":[0x00, 0x01, 0x01, 0x7F, 0x01, 0x01],
       "U":[0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F],
       "V":[0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F],
       "W":[0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F],
       "X":[0x00, 0x63, 0x14, 0x08, 0x14, 0x63],
       "Y":[0x00, 0x07, 0x08, 0x70, 0x08, 0x07],
       "Z":[0x00, 0x61, 0x51, 0x49, 0x45, 0x43],
       "a":[0x00, 0x20, 0x54, 0x54, 0x54, 0x78],
       "b":[0x00, 0x7F, 0x48, 0x44, 0x44, 0x38],
       "c":[0x00, 0x38, 0x44, 0x44, 0x44, 0x20],
       "d":[0x00, 0x38, 0x44, 0x44, 0x48, 0x7F],
       "e":[0x00, 0x38, 0x54, 0x54, 0x54, 0x18],
       "f":[0x00, 0x08, 0x7E, 0x09, 0x01, 0x02],
       "g":[0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C],
       "h":[0x00, 0x7F, 0x08, 0x04, 0x04, 0x78],
       "i":[0x00, 0x00, 0x44, 0x7D, 0x40, 0x00],
       "j":[0x00, 0x40, 0x80, 0x84, 0x7D, 0x00],
       "k":[0x00, 0x7F, 0x10, 0x28, 0x44, 0x00],
       "l":[0x00, 0x00, 0x41, 0x7F, 0x40, 0x00],
       "m":[0x00, 0x7C, 0x04, 0x18, 0x04, 0x78],
       "n":[0x00, 0x7C, 0x08, 0x04, 0x04, 0x78],
       "o":[0x00, 0x38, 0x44, 0x44, 0x44, 0x38],
       "p":[0x00, 0xFC, 0x24, 0x24, 0x24, 0x18],
       "q":[0x00, 0x18, 0x24, 0x24, 0x18, 0xFC],
       "r":[0x00, 0x7C, 0x08, 0x04, 0x04, 0x08],
       "s":[0x00, 0x48, 0x54, 0x54, 0x54, 0x20],
       "t":[0x00, 0x04, 0x3F, 0x44, 0x40, 0x20],
       "u":[0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C],
       "v":[0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C],
       "w":[0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C],
       "x":[0x00, 0x44, 0x28, 0x10, 0x28, 0x44],
       "y":[0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C],
       "z":[0x00, 0x44, 0x64, 0x54, 0x4C, 0x44]
      }

spi = SPI(30)  #创建对象 SPI3总线上的第0个设备
spi.init(100000,0,0,8,SPI.MSB)#初始化 波特率100000，极性0，相位0，传输数据长度8位，从高位开始传输数据

#写命令
def write_command_byte(c):
    c = c.to_bytes(1,'little')
    cs.value(0)
    dc.value(0)
    spi.write(c)
    cs.value(1)

#写数据
def write_data_byte(c):
    c = c.to_bytes(1,'little')
    cs.value(0)
    dc.value(1)
    spi.write(c)
    cs.value(1)

#写命令
def write_command(c, *data):
    write_command_byte(c)
    if data:
        for d in data: write_data_byte(d)

#设置坐标
def OLED_Set_Pos(x,y):
    write_command(0xb0+y);
    write_command(((x&0xf0)>>4)|0x10)
    write_command((x&0x0f)|0x01)

#清屏
def Clear():
    i = 0
    while(i<8):
        write_command(0xb0+i)
        i = i + 1
        write_command(0x00)
        write_command(0x10)
        n = 128
        while(n>0):
            write_data_byte(0)
            n = n -1
#显示字符
def OLED_ShowChar(x,y,s):
    OLED_Set_Pos(x,y+1)
    for d in asc[s]:
        write_data_byte(d)

#OLED初始化
def init():
    rst.value(0)
    time.sleep(100)
    rst.value(1)
    time.sleep(100)
    write_command(0xAE)
    write_command(0x00)
    write_command(0x10)
    write_command(0x40)
    write_command(0x81)
    write_command(0xCF)
    write_command(0xA1)
    write_command(0xC8)
    write_command(0xA6)
    write_command(0xA8)
    write_command(0x3f)
    write_command(0xD3)
    write_command(0x00)
    write_command(0xd5)
    write_command(0x80)
    write_command(0xD9)
    write_command(0xF1)
    write_command(0xDA)
    write_command(0x12)
    write_command(0xDB)
    write_command(0x40)
    write_command(0x20)
    write_command(0x02)
    write_command(0x8D)
    write_command(0x14)
    write_command(0xA4)
    write_command(0xA6)
    write_command(0xAF)

    write_command(0xAF)
    Clear()


init()
while(True):
    OLED_ShowChar(0 ,0,"O")
    OLED_ShowChar(8 ,0,"p")
    OLED_ShowChar(16,0,"e")
    OLED_ShowChar(24,0,"n")
    OLED_ShowChar(32,0,"A")
    OLED_ShowChar(40,0,"R")
    OLED_ShowChar(48,0,"T")
    OLED_ShowChar(64,0,"m")
    OLED_ShowChar(72,0,"i")
    OLED_ShowChar(80,0,"n")
    OLED_ShowChar(88,0,"i")
    OLED_ShowChar(104,0,"6")
    OLED_ShowChar(112,0,"6")
    OLED_ShowChar(120,0,"6")

